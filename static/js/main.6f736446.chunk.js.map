{"version":3,"sources":["ButtonHoldPress.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["ButtonHoldPress","handleButtonPress","buttonPressTimer","setTimeout","props","eventHandler","timeStart","Date","getTime","handleButtonRelease","clearTimeout","onClick","onTouchStart","this","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","children","Component","Cell","isLose","isWin","cell","isOpen","isMine","totalMine","isFlag","toggleFlagHandler","openCellHandler","className","App","getSettingLevelGame","level","totalRow","totalCol","newGame","list","i","j","totalMineAround","timer","setInterval","setState","state","time","count","row","Math","round","random","col","isStarting","playAgainHandler","clearInterval","countMineAround","position","checkIsWin","openCellRegressiveHandler","r1","c1","r2","c2","isOpenMine","toggleFlagHander","map","key","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f736446.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ButtonHoldPress extends Component {\r\n  handleButtonPress = () => {\r\n    this.buttonPressTimer = setTimeout(this.props.eventHandler, 300);\r\n    this.timeStart = new Date().getTime();\r\n  };\r\n\r\n  handleButtonRelease = () => {\r\n    clearTimeout(this.buttonPressTimer);\r\n    const diff = new Date().getTime() - this.timeStart;\r\n    if (diff < 200) this.props.onClick();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        onTouchStart={this.handleButtonPress}\r\n        onTouchEnd={this.handleButtonRelease}\r\n        onMouseDown={this.handleButtonPress}\r\n        onMouseUp={this.handleButtonRelease}\r\n        onMouseLeave={this.handleButtonRelease}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonHoldPress;\r\n","import React from \"react\";\r\nimport ButtonHoldPress from \"./ButtonHoldPress\";\r\nimport \"./Cell.scss\";\r\n\r\nexport default function Cell(props) {\r\n  const {\r\n    isLose,\r\n    isWin,\r\n    cell: { isOpen, isMine, totalMine, isFlag },\r\n  } = props;\r\n  return (\r\n    <ButtonHoldPress\r\n      eventHandler={props.toggleFlagHandler}\r\n      onClick={isLose || isWin ? () => {} : props.openCellHandler}\r\n    >\r\n      <div className={\"cell\" + (isOpen ? \" open\" : \"\")}>\r\n        {totalMine}\r\n        {!isOpen && isFlag && <i className=\"fas fa-flag-checkered\"></i>}\r\n        {isLose && isMine && <i className=\"fas fa-bomb\"></i>}\r\n      </div>\r\n    </ButtonHoldPress>\r\n  );\r\n}\r\n","import React, { Component, PureComponent } from \"react\";\nimport \"./App.scss\";\nimport Cell from \"./Cell\";\n\nconst EASY = 1;\nconst NORMAL = 2;\nconst HARD = 3;\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      list: [],\n      isStarting: true,\n      totalRow: 20,\n      totalCol: 10,\n      totalMine: 20,\n      isLose: false,\n      isWin: false,\n      time: 0,\n    };\n  }\n\n  getSettingLevelGame = (level) => {\n    let totalMine, totalRow, totalCol;\n    switch (level) {\n      case 1:\n        totalMine = 5;\n        totalRow = 10;\n        totalCol = 5;\n        break;\n      case 2:\n        totalMine = 20;\n        totalRow = 15;\n        totalCol = 10;\n        break;\n      case 3:\n        totalMine = 30;\n        totalRow = 20;\n        totalCol = 15;\n        break;\n      default:\n    }\n    return { totalMine, totalCol, totalRow };\n  };\n\n  newGame = (level) => {\n    const list = [];\n    const { totalRow, totalCol, totalMine } = this.getSettingLevelGame(level);\n    for (let i = 0; i < totalRow; i++) {\n      list[i] = [];\n      for (let j = 0; j < totalCol; j++) {\n        list[i][j] = {\n          isOpen: false,\n          isFlag: false,\n          totalMineAround: null,\n          isMine: false,\n        };\n      }\n    }\n\n    this.timer = setInterval(() => {\n      this.setState((state) => {\n        return { time: state.time + 1 };\n      });\n    }, 1000);\n\n    for (let count = 0; count < totalMine; ) {\n      const row = Math.round(Math.random() * (totalRow - 1));\n      const col = Math.round(Math.random() * (totalCol - 1));\n      if (!list[row][col].isMine) {\n        list[row][col].isMine = true;\n        count++;\n      }\n    }\n    this.setState({\n      totalCol,\n      totalMine,\n      totalRow,\n      list,\n      isWin: false,\n      isLose: false,\n      isStarting: false,\n      time: 0,\n    });\n  };\n\n  playAgainHandler = () => {\n    this.setState({ isStarting: true });\n    clearInterval(this.timer);\n  };\n\n  countMineAround = (position) => {\n    const { row, col } = position;\n    let count = 0;\n\n    for (let i = row - 1; i <= row + 1; i++) {\n      if (!(i >= 0 && i < this.state.totalRow)) continue;\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (!(j >= 0 && j < this.state.totalCol)) continue;\n        if (this.state.list[i][j].isMine) count++;\n      }\n    }\n    return count;\n  };\n\n  checkIsWin = () => {\n    const { totalRow, totalCol, list } = this.state;\n    for (let i = 0; i < totalRow; i++) {\n      for (let j = 0; j < totalCol; j++) {\n        if (!list[i][j].isOpen && !list[i][j].isMine) return false;\n      }\n    }\n    return true;\n  };\n\n  openCellRegressiveHandler = (list, position) => {\n    const { row, col } = position;\n    if (list[row][col].isOpen) return false;\n    list[row][col].isOpen = true;\n\n    if (list[row][col].isMine) return true;\n\n    const totalMine = this.countMineAround(position);\n\n    if (totalMine > 0) {\n      list[row][col].totalMine = totalMine;\n    } else {\n      let r1 = row === 0 ? 0 : -1;\n      let c1 = col === 0 ? 0 : -1;\n      let r2 = row === this.state.totalRow - 1 ? 1 : 2;\n      let c2 = col === this.state.totalCol - 1 ? 1 : 2;\n\n      for (; r1 < r2; r1++) {\n        for (let j = c1; j < c2; j++) {\n          this.openCellRegressiveHandler(list, { row: row + r1, col: col + j });\n        }\n      }\n    }\n    return false;\n  };\n\n  openCellHandler = (position) => {\n    const list = [...this.state.list];\n    const isOpenMine = this.openCellRegressiveHandler(list, position);\n\n    this.setState({ list, isLose: isOpenMine }, () => {\n      if (this.state.isLose) clearInterval(this.timer);\n    \n      else if (this.checkIsWin()) {\n        clearInterval(this.timer);\n        this.setState({ isWin: true });\n      }\n    });\n  };\n\n  toggleFlagHander = (position) => {\n    const { row, col } = position;\n    const list = [...this.state.list];\n    list[row][col].isFlag = !list[row][col].isFlag;\n    this.setState({ list });\n  };\n  componentDidMount() {}\n  render() {\n    return (\n      <div className=\"app\">\n        <header>\n          <h1>Dò mìn</h1>\n          {this.state.isWin && <h2>WIN!</h2>}\n          {this.state.isLose && <h2>LOSER!</h2>}\n          {!this.state.isStarting && (\n            <div className=\"info\">\n              <div className=\"flag\">\n                <i className=\"fas fa-flag\"></i>\n                <span>{this.state.totalMine}</span>\n              </div>\n              <div className=\"timer\">\n                <i className=\"fas fa-clock\"></i>\n                <span>{this.state.time} s</span>\n              </div>\n              <button onClick={this.playAgainHandler}>\n                <i className=\"fas fa-redo-alt\"></i>\n                <span>Chơi lại</span>\n              </button>\n            </div>\n          )}\n        </header>\n\n        <main>\n          {this.state.isStarting ? (\n            <div className=\"difficult-group\">\n              <button className=\"easy\" onClick={() => this.newGame(EASY)}>\n                Dễ\n              </button>\n              <button className=\"normal\" onClick={() => this.newGame(NORMAL)}>\n                Vừa\n              </button>\n              <button className=\"hard\" onClick={() => this.newGame(HARD)}>\n                Khó\n              </button>\n            </div>\n          ) : (\n            this.state.list.map((row, i) => (\n              <div className=\"row\" key={i}>\n                {row.map((cell, j) => {\n                  return (\n                    <Cell\n                      key={j}\n                      cell={cell}\n                      toggleFlagHandler={() =>\n                        this.toggleFlagHander({ row: i, col: j })\n                      }\n                      openCellHandler={() =>\n                        this.openCellHandler({\n                          row: i,\n                          col: j,\n                        })\n                      }\n                      isLose={this.state.isLose}\n                      isWin={this.state.isWin}\n                    />\n                  );\n                })}\n              </div>\n            ))\n          )}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}